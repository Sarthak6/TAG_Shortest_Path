Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a world using rooms and hallways? 
What is the hexagon and what is the tesselation on the Project 3 side?

A: If our goal is to generate explorable worlds, we want to make sure that they are not filled with only walls or other obstacles. Therefore, we must be able to correctly align open hallways with their connecting rooms, etc. This is similar to the tessellation problem of figuring out how to correctly fit together hexagons to create a fully aligned world.

-----
Q: If you were to start working on world generation, what kind of method would you think of writing first? 
Think back to the lab and the process used to eventually get to tesselating hexagons.

A: The first thing I think of when thinking of explorable world generation is to use a Disjoint Set. If we can create a Weighted Quick Union out of the open spaces in our world and ensure that most open spaces are connected (similar to the Percolation problem), we can create our worlds such that they are explorable.

My initial idea for this is to make a world entirely of walls and then continue to transform random tiles into open (NOTHING) tiles until all open tiles are connected. So, the first method I would write would be to randomly choose a tile not on the edge of the world.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A: A hallway has at least two openings. A room has at least one opening, is at least two tiles wide in each direction, and is larger than a certain number of tiles. They are similar in that they each must have open tiles.

-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way. 
After looking at your own implemention, consider the implementation provided near the end of the lab. 
How did your implementation differ from the given one? What lessons can be learned from it?

A: I figured that tessellation can only happen if for each row and column, we have complimentary numbers of items (i.e. if we have three tiles from one hexagon and the hexagons are size 3, then our max number of tiles in a row for a given hexagon must be 3 + (3 - 1)^2. Or, more generally, given a hexagon of size n, the max number of tiles in a row is n + (n - 1)^2.) In that way then, our implementations are similar in that they consider tiles in a row/column. However, it differed in that our great Professor Hug's solution was far more thought out and included many smaller steps.

-----
Q: Consider an algorithm for placing rooms and hallways on your map. 
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task. 
In general, algorithms with as few edge cases as possible are better algorithms.

A: As I stated above, my initial algorithm is to fill the world entirely with walls at first, using some data structure to hold these objects (perhaps a HashMap?), and to then create a disjoint set out of the open tiles and closed tiles, choosing randomly which tiles to open, until all open tiles are connected in our disjoint set.
